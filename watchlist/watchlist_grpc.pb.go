// protoc --proto_path=. --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative watchlist.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: watchlist.proto

package watchlist

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WatchlistService_AddToWatchlist_FullMethodName      = "/watchlist.WatchlistService/AddToWatchlist"
	WatchlistService_RemoveFromWatchlist_FullMethodName = "/watchlist.WatchlistService/RemoveFromWatchlist"
	WatchlistService_GetWatchlist_FullMethodName        = "/watchlist.WatchlistService/GetWatchlist"
	WatchlistService_CheckInWatchlist_FullMethodName    = "/watchlist.WatchlistService/CheckInWatchlist"
)

// WatchlistServiceClient is the client API for WatchlistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Сервис для работы со списками просмотра
type WatchlistServiceClient interface {
	AddToWatchlist(ctx context.Context, in *AddToWatchlistRequest, opts ...grpc.CallOption) (*AddToWatchlistResponse, error)
	RemoveFromWatchlist(ctx context.Context, in *RemoveFromWatchlistRequest, opts ...grpc.CallOption) (*RemoveFromWatchlistResponse, error)
	GetWatchlist(ctx context.Context, in *GetWatchlistRequest, opts ...grpc.CallOption) (*GetWatchlistResponse, error)
	CheckInWatchlist(ctx context.Context, in *CheckInWatchlistRequest, opts ...grpc.CallOption) (*CheckInWatchlistResponse, error)
}

type watchlistServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWatchlistServiceClient(cc grpc.ClientConnInterface) WatchlistServiceClient {
	return &watchlistServiceClient{cc}
}

func (c *watchlistServiceClient) AddToWatchlist(ctx context.Context, in *AddToWatchlistRequest, opts ...grpc.CallOption) (*AddToWatchlistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddToWatchlistResponse)
	err := c.cc.Invoke(ctx, WatchlistService_AddToWatchlist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchlistServiceClient) RemoveFromWatchlist(ctx context.Context, in *RemoveFromWatchlistRequest, opts ...grpc.CallOption) (*RemoveFromWatchlistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveFromWatchlistResponse)
	err := c.cc.Invoke(ctx, WatchlistService_RemoveFromWatchlist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchlistServiceClient) GetWatchlist(ctx context.Context, in *GetWatchlistRequest, opts ...grpc.CallOption) (*GetWatchlistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWatchlistResponse)
	err := c.cc.Invoke(ctx, WatchlistService_GetWatchlist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchlistServiceClient) CheckInWatchlist(ctx context.Context, in *CheckInWatchlistRequest, opts ...grpc.CallOption) (*CheckInWatchlistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckInWatchlistResponse)
	err := c.cc.Invoke(ctx, WatchlistService_CheckInWatchlist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WatchlistServiceServer is the server API for WatchlistService service.
// All implementations must embed UnimplementedWatchlistServiceServer
// for forward compatibility.
//
// Сервис для работы со списками просмотра
type WatchlistServiceServer interface {
	AddToWatchlist(context.Context, *AddToWatchlistRequest) (*AddToWatchlistResponse, error)
	RemoveFromWatchlist(context.Context, *RemoveFromWatchlistRequest) (*RemoveFromWatchlistResponse, error)
	GetWatchlist(context.Context, *GetWatchlistRequest) (*GetWatchlistResponse, error)
	CheckInWatchlist(context.Context, *CheckInWatchlistRequest) (*CheckInWatchlistResponse, error)
	mustEmbedUnimplementedWatchlistServiceServer()
}

// UnimplementedWatchlistServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWatchlistServiceServer struct{}

func (UnimplementedWatchlistServiceServer) AddToWatchlist(context.Context, *AddToWatchlistRequest) (*AddToWatchlistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToWatchlist not implemented")
}
func (UnimplementedWatchlistServiceServer) RemoveFromWatchlist(context.Context, *RemoveFromWatchlistRequest) (*RemoveFromWatchlistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromWatchlist not implemented")
}
func (UnimplementedWatchlistServiceServer) GetWatchlist(context.Context, *GetWatchlistRequest) (*GetWatchlistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWatchlist not implemented")
}
func (UnimplementedWatchlistServiceServer) CheckInWatchlist(context.Context, *CheckInWatchlistRequest) (*CheckInWatchlistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckInWatchlist not implemented")
}
func (UnimplementedWatchlistServiceServer) mustEmbedUnimplementedWatchlistServiceServer() {}
func (UnimplementedWatchlistServiceServer) testEmbeddedByValue()                          {}

// UnsafeWatchlistServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WatchlistServiceServer will
// result in compilation errors.
type UnsafeWatchlistServiceServer interface {
	mustEmbedUnimplementedWatchlistServiceServer()
}

func RegisterWatchlistServiceServer(s grpc.ServiceRegistrar, srv WatchlistServiceServer) {
	// If the following call pancis, it indicates UnimplementedWatchlistServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WatchlistService_ServiceDesc, srv)
}

func _WatchlistService_AddToWatchlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToWatchlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchlistServiceServer).AddToWatchlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WatchlistService_AddToWatchlist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchlistServiceServer).AddToWatchlist(ctx, req.(*AddToWatchlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatchlistService_RemoveFromWatchlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFromWatchlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchlistServiceServer).RemoveFromWatchlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WatchlistService_RemoveFromWatchlist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchlistServiceServer).RemoveFromWatchlist(ctx, req.(*RemoveFromWatchlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatchlistService_GetWatchlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWatchlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchlistServiceServer).GetWatchlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WatchlistService_GetWatchlist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchlistServiceServer).GetWatchlist(ctx, req.(*GetWatchlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatchlistService_CheckInWatchlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckInWatchlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchlistServiceServer).CheckInWatchlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WatchlistService_CheckInWatchlist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchlistServiceServer).CheckInWatchlist(ctx, req.(*CheckInWatchlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WatchlistService_ServiceDesc is the grpc.ServiceDesc for WatchlistService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WatchlistService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "watchlist.WatchlistService",
	HandlerType: (*WatchlistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddToWatchlist",
			Handler:    _WatchlistService_AddToWatchlist_Handler,
		},
		{
			MethodName: "RemoveFromWatchlist",
			Handler:    _WatchlistService_RemoveFromWatchlist_Handler,
		},
		{
			MethodName: "GetWatchlist",
			Handler:    _WatchlistService_GetWatchlist_Handler,
		},
		{
			MethodName: "CheckInWatchlist",
			Handler:    _WatchlistService_CheckInWatchlist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "watchlist.proto",
}
